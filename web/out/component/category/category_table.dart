// Auto-generated from category_table.html.
// DO NOT EDIT.

library x_category_table;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'dart:html';
import 'package:category_links/category_links.dart';
import 'package:web_ui/web_ui.dart';
import 'category_add.dart';
import 'category_edit.dart';
import '../link/link_table.dart';



class CategoryTable extends WebComponent {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /**
   * Shadow root for this component. We use 'var' to allow simulating shadow DOM
   * on browsers that don't support this feature.
   */
  var _root;
  autogenerated.ButtonElement __addCategoryButton;
  autogenerated.DivElement __e18, __e4, __e7;
  autogenerated.TableSectionElement __e15;
  autogenerated.Template __t;

  CategoryTable.forElement(e) : super.forElement(e);

  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    _root.innerHtml = '''
        <div id="__e-4" style="display:none"></div>
        <div id="__e-7" style="display:none"></div>
        <table>
          <caption class="marker">
            Categories
            <button id="addCategoryButton">Show Add</button>
          </caption>
          <tbody><tr>
            <th>Name</th>
            <th>Description</th>
            <th>Edit</th>
            <th>Remove</th>
            <th>Show</th>
          </tr>
          </tbody><tbody id="__e-15"></tbody>
        </table>
        <br>
        <div id="__e-18" style="display:none"></div>
      ''';
    __e4 = _root.query('#__e-4');
    __t.conditional(__e4, () => showCategoryAdd, (__t) {
      var __e2, __e3;
      __e3 = new autogenerated.Element.html('<div template="" if="showCategoryAdd">\n          <x-category-add id="__e-2"></x-category-add>\n        </div>');
      __e2 = __e3.query('#__e-2');
      __t.oneWayBind(() =>  categories , (e) { __e2.xtag.categories = e; }, false, false);
      new CategoryAdd.forElement(__e2);
      __t.component(__e2);
    __t.add(__e3);
    });

    __e7 = _root.query('#__e-7');
    __t.conditional(__e7, () => showCategoryEdit, (__t) {
      var __e5, __e6;
      __e6 = new autogenerated.Element.html('<div template="" if="showCategoryEdit">\n          <x-category-edit id="__e-5">\n          </x-category-edit>\n        </div>');
      __e5 = __e6.query('#__e-5');
      __t.oneWayBind(() =>  categories , (e) { __e5.xtag.categories = e; }, false, false);
      __t.oneWayBind(() =>  category , (e) { __e5.xtag.category = e; }, false, false);
      new CategoryEdit.forElement(__e5);
      __t.component(__e5);
    __t.add(__e6);
    });

    __addCategoryButton = _root.query('#addCategoryButton');
    __t.listen(__addCategoryButton.onClick, ($event) { add(); });
    __e15 = _root.query('#__e-15');
    __t.loop(__e15, () => categories.toList(), (category, __t) {
      var __e11, __e12, __e13, __e14, __e9, __editCategoryButton;
      __e14 = new autogenerated.Element.html('<tr>\n              <td id="__e-9"></td>\n              <td id="__e-11"></td>\n              <td><button id="editCategoryButton">\n                Edit</button>\n              </td>\n              <td><button id="__e-12">Remove</button></td>\n              <td><button id="__e-13">Links</button></td>\n            </tr>');
      __e9 = __e14.query('#__e-9');
      var __binding8 = __t.contentBind(() =>  category.code , false);
      __e9.nodes.add(__binding8);
      __e11 = __e14.query('#__e-11');
      var __binding10 = __t.contentBind(() =>  category.description , false);
      __e11.nodes.add(__binding10);
      __editCategoryButton = __e14.query('#editCategoryButton');
      __t.listen(__editCategoryButton.onClick, ($event) { edit(category); });
      __e12 = __e14.query('#__e-12');
      __t.listen(__e12.onClick, ($event) { delete(category); });
      __e13 = __e14.query('#__e-13');
      __t.listen(__e13.onClick, ($event) { showLinks(category); });
    __t.addAll([new autogenerated.Text('\n            '),
        __e14,
        new autogenerated.Text('\n          ')]);
    }, isTemplateElement: false);
    __e18 = _root.query('#__e-18');
    __t.conditional(__e18, () => showCategoryLinks, (__t) {
      var __e16, __e17;
      __e17 = new autogenerated.Element.html('<div template="" if="showCategoryLinks">\n          <x-link-table id="__e-16">\n          </x-link-table>\n        </div>');
      __e16 = __e17.query('#__e-16');
      __t.oneWayBind(() =>  category , (e) { __e16.xtag.category = e; }, false, false);
      __t.oneWayBind(() =>  category.links , (e) { __e16.xtag.links = e; }, false, false);
      new LinkTable.forElement(__e16);
      __t.component(__e16);
    __t.add(__e17);
    });

    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e4 = __e7 = __addCategoryButton = __e15 = __e18 = null;
  }

  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }

  /** Original code from the component. */

  Categories categories;
  Category category;

  bool showCategoryAdd = false;
  bool showCategoryEdit = false;
  bool showCategoryLinks = false;

  add() {
    ButtonElement addCategory = query("#addCategoryButton");
    if (addCategory.text == 'Show Add') {
      showCategoryAdd = true;
      addCategory.text = 'Hide Add';
    } else {
      showCategoryAdd = false;
      addCategory.text = 'Show Add';
    }
  }

  edit(category) {
    showCategoryEdit = true;
    this.category = category;
  }

  delete(category) {
    categories.remove(category);
    showCategoryLinks = false;
  }

  showLinks(category) {
    showCategoryLinks = true;
    this.category = category;
  }

}
//@ sourceMappingURL=category_table.dart.map