// Auto-generated from category_add.html.
// DO NOT EDIT.

library x_category_add;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'dart:html';
import 'package:category_links/category_links.dart';
import 'package:web_ui/web_ui.dart';



class CategoryAdd extends WebComponent {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /**
   * Shadow root for this component. We use 'var' to allow simulating shadow DOM
   * on browsers that don't support this feature.
   */
  var _root;
  autogenerated.ButtonElement __e19;
  autogenerated.InputElement __addCategoryCode, __addCategoryDescription;
  autogenerated.SpanElement __addCategoryMessage;
  autogenerated.Template __t;

  CategoryAdd.forElement(e) : super.forElement(e);

  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    _root.innerHtml = '''
        <div>
          <br>
          <label for="add-category-code">Name</label>
          <input id="add-category-code" type="text" size="32">
          <br>
          <label for="add-category-description">Description</label>
          <input id="add-category-description" type="text" size="96">
          <br>
          <button id="__e-19">Add</button>
          <span id="add-category-message"></span>
        </div>
      ''';
    __addCategoryCode = _root.query('#add-category-code');
    __addCategoryDescription = _root.query('#add-category-description');
    __e19 = _root.query('#__e-19');
    __t.listen(__e19.onClick, ($event) { add(); });
    __addCategoryMessage = _root.query('#add-category-message');
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __addCategoryCode = __addCategoryDescription = __e19 = __addCategoryMessage = null;
  }

  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }

  /** Original code from the component. */

  Categories categories;

  add() {
    InputElement code = query("#add-category-code");
    InputElement description = query("#add-category-description");
    Element message = query("#add-category-message");
    var error = false;
    message.text = '';
    if (code.value.trim() == '') {
      message.text = 'category name is mandatory; ${message.text}';
      error = true;
    }
    if (!error) {
      var category = new Category(categories.concept);
	    category.code = code.value;
	    category.description = description.value;
      if (categories.add(category)) {
        message.text = 'added';
        var categoryTable = query('x-category-table').xtag;
        categoryTable.categories.order();
      } else {
        message.text = 'category name already in use';
      }
    }
  }

}
//@ sourceMappingURL=category_add.dart.map