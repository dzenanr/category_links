// Auto-generated from link_table.html.
// DO NOT EDIT.

library x_link_table;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'dart:html';
import 'package:category_links/category_links.dart';
import 'package:web_ui/web_ui.dart';
import 'link_add.dart';
import 'link_edit.dart';



class LinkTable extends WebComponent {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /**
   * Shadow root for this component. We use 'var' to allow simulating shadow DOM
   * on browsers that don't support this feature.
   */
  var _root;
  autogenerated.ButtonElement __addLinkButton;
  autogenerated.DivElement __e24, __e27;
  autogenerated.TableCaptionElement __e29;
  autogenerated.TableSectionElement __e36;
  autogenerated.Template __t;

  LinkTable.forElement(e) : super.forElement(e);

  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    _root.innerHtml = '''
        <div id="__e-24" style="display:none"></div>
        <div id="__e-27" style="display:none"></div>
        <table>
          <caption class="marker" id="__e-29"></caption>
          <tbody><tr>
            <th>Web Link</th>
            <th>Description</th>
            <th>Edit</th>
            <th>Remove</th>
          </tr>
          </tbody><tbody id="__e-36"></tbody>
        </table>
      ''';
    __e24 = _root.query('#__e-24');
    __t.conditional(__e24, () => showLinkAdd, (__t) {
      var __e22, __e23;
      __e23 = new autogenerated.Element.html('<div template="" if="showLinkAdd">\n          <x-link-add id="__e-22">\n          </x-link-add>\n        </div>');
      __e22 = __e23.query('#__e-22');
      __t.oneWayBind(() =>  category , (e) { __e22.xtag.category = e; }, false, false);
      __t.oneWayBind(() =>  links , (e) { __e22.xtag.links = e; }, false, false);
      new LinkAdd.forElement(__e22);
      __t.component(__e22);
    __t.add(__e23);
    });

    __e27 = _root.query('#__e-27');
    __t.conditional(__e27, () => showLinkEdit, (__t) {
      var __e25, __e26;
      __e26 = new autogenerated.Element.html('<div template="" if="showLinkEdit">\n          <x-link-edit id="__e-25">\n          </x-link-edit>\n        </div>');
      __e25 = __e26.query('#__e-25');
      __t.oneWayBind(() =>  category , (e) { __e25.xtag.category = e; }, false, false);
      __t.oneWayBind(() =>  link , (e) { __e25.xtag.link = e; }, false, false);
      __t.oneWayBind(() =>  links , (e) { __e25.xtag.links = e; }, false, false);
      new LinkEdit.forElement(__e25);
      __t.component(__e25);
    __t.add(__e26);
    });

    __e29 = _root.query('#__e-29');
    var __binding28 = __t.contentBind(() =>  category.code , false);
    __addLinkButton = new autogenerated.Element.html('<button id="addLinkButton">Show Add</button>');
    __t.listen(__addLinkButton.onClick, ($event) { add(); });
    __e29.nodes.addAll([new autogenerated.Text('\n            Links of '),
        __binding28,
        new autogenerated.Text(' category\n            '),
        __addLinkButton,
        new autogenerated.Text('\n          ')]);
    __e36 = _root.query('#__e-36');
    __t.loop(__e36, () => links.toList(), (link, __t) {
      var __e31, __e33, __e34, __e35, __editLinkButton;
      __e35 = new autogenerated.Element.html('<tr>\n              <td>\n                <a id="__e-31"></a>\n              </td>\n              <td id="__e-33"></td>\n              <td><button id="editLinkButton">\n                Edit</button>\n              </td>\n              <td><button id="__e-34">Remove</button></td>\n            </tr>');
      __e31 = __e35.query('#__e-31');
      var __binding30 = __t.contentBind(() =>  link.code , false);
      __e31.nodes.addAll([new autogenerated.Text('\n                  '),
          __binding30,
          new autogenerated.Text('\n                ')]);
      __t.oneWayBind(() =>  link.url.toString() , (e) { __e31.href = e; }, false, true);
      __e33 = __e35.query('#__e-33');
      var __binding32 = __t.contentBind(() =>  link.description , false);
      __e33.nodes.add(__binding32);
      __editLinkButton = __e35.query('#editLinkButton');
      __t.listen(__editLinkButton.onClick, ($event) { edit(link); });
      __e34 = __e35.query('#__e-34');
      __t.listen(__e34.onClick, ($event) { delete(link); });
    __t.addAll([new autogenerated.Text('\n            '),
        __e35,
        new autogenerated.Text('\n          ')]);
    }, isTemplateElement: false);
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e24 = __e27 = __e29 = __addLinkButton = __e36 = null;
  }

  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }

  /** Original code from the component. */

  Category category;
  Links links;
  Link link;

  bool showLinkAdd = false;
  bool showLinkEdit = false;

  add() {
    ButtonElement addLink = query("#addLinkButton");
    if (addLink.text == 'Show Add') {
      showLinkAdd = true;
      addLink.text = 'Hide Add';
    } else {
      showLinkAdd = false;
      addLink.text = 'Show Add';
    }
  }

  edit(link) {
    showLinkEdit = true;
    this.link = link;
  }

  delete(link) {
    links.remove(link);
  }

}
//@ sourceMappingURL=link_table.dart.map